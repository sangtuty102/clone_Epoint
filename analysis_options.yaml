analyzer:
  strong-mode:
    implicit-casts: true
    implicit-dynamic: true
  errors:
    missing_required_param: error
    missing_return: error
    # todo: ignore
  language:
    strict-inference: false
    strict-raw-types: false
  exclude:
    - "bin/cache/**"
    
linter:
  rules:
    ### ---------- CUSTOMIZE ---------- ###
    # Avoid empty else statements.
    avoid_empty_else: true

    # Avoid print calls in production code.
    avoid_print: false

    # Avoid relative imports for files in lib/.
    avoid_relative_lib_imports: false
    
    # Prefer relative imports for files in lib/.
    prefer_relative_imports: false

    # Avoid returning null for Future.
    avoid_returning_null_for_future: false

    # Avoid slow async dart:io methods.
    avoid_slow_async_io: false

    # Avoid types as parameter names.
    avoid_types_as_parameter_names: false

    # Avoid using web-only libraries outside Flutter web plugin packages.
    avoid_web_libraries_in_flutter: true

    # Cancel instances of dart.async.StreamSubscription.
    cancel_subscriptions: false

    # Close instances of dart.core.Sink.
    close_sinks: false

    # Only reference in scope identifiers in doc comments.
    comment_references: false

    # Avoid control flow in finally blocks.
    control_flow_in_finally: false

    # DO reference all public properties in debug methods.
    diagnostic_describe_all_properties: false

    # Avoid empty statements.
    empty_statements: true

    # Always override hashCode if overriding ==.
    hash_and_equals: true

    # Conditions should not unconditionally evaluate to true or to false.
    invariant_booleans: false

    # Invocation of Iterable.contains with references of unrelated types.
    iterable_contains_unrelated_type: false

    # Invocation of remove with references of unrelated types.
    list_remove_unrelated_type: false

    # Boolean expression composed only with literals.
    literal_only_boolean_expressions: true

    # Don't use adjacent strings in list.
    no_adjacent_strings_in_list: true

    # Don't use more than one case with same value.
    no_duplicate_case_values: true

    # Don't put any logic in createState.
    no_logic_in_create_state: false

    # Don't use the Null type, unless you are positive that you don't want void.
    prefer_void_to_null: false

    # Test type arguments in operator ==(Object other).
    test_types_in_equals: false

    # Avoid throw in finally block.
    throw_in_finally: false

    # Avoid using unnecessary statements.
    unnecessary_statements: false

    # Equality operator == invocation with references of unrelated types.
    unrelated_type_equality_checks: false

    # Avoid unsafe HTML APIs.
    unsafe_html: false

    # Use key in widget constructors.
    use_key_in_widget_constructors: false

    # Use valid regular expression syntax.
    valid_regexps: true

    ### ---------- Style Rules ---------- ###
    # Declare method return types.
    always_declare_return_types: false

    # Separate the control structure expression from its statement.
    always_put_control_body_on_new_line: false

    # Put @required named parameters first.
    always_put_required_named_parameters_first: false

    # Specify @required on named parameters without defaults.
    always_require_non_null_named_parameters: false

    # Specify type annotations.
    always_specify_types: false

    # Annotate overridden members.
    annotate_overrides: false

    # Avoid annotating with dynamic when not required.
    avoid_annotating_with_dynamic: false

    # Avoid using as.
    avoid_as: false

    # Avoid bool literals in conditional expressions.
    avoid_bool_literals_in_conditional_expressions: false

    # Avoid catches without on clauses.
    avoid_catches_without_on_clauses: false

    # Don't explicitly catch Error or types that implement it.
    avoid_catching_errors: false

    # Avoid defining a class that contains only static members.
    avoid_classes_with_only_static_members: false

    # Avoid double and int checks.
    avoid_double_and_int_checks: false

    # AVOID overloading operator == and hashCode on classes not marked @immutable.
    avoid_equals_and_hash_code_on_mutable_classes: false

    # Avoid escaping inner quotes by converting surrounding quotes.
    avoid_escaping_inner_quotes: false

    # Avoid field initializers in const classes.
    avoid_field_initializers_in_const_classes: false

    # Avoid using forEach with a function literal.
    avoid_function_literals_in_foreach_calls: false

    # Don't implement classes that override ==.
    avoid_implementing_value_types: false

    # Don't explicitly initialize variables to null.
    avoid_init_to_null: false

    # Avoid JavaScript rounded ints.
    avoid_js_rounded_ints: false

    # Don't check for null in custom == operators.
    avoid_null_checks_in_equality_operators: false

    # Avoid positional boolean parameters.
    avoid_positional_boolean_parameters: false

    # Avoid private typedef functions.
    avoid_private_typedef_functions: false

    # Avoid redundant argument values.
    avoid_redundant_argument_values: false

    # Don't rename parameters of overridden methods.
    avoid_renaming_method_parameters: false

    # Avoid return types on setters.
    avoid_return_types_on_setters: false

    # Avoid returning null from members whose return type is bool, double, int, or num.
    avoid_returning_null: false

    # Avoid returning null for void.
    avoid_returning_null_for_void: false

    # Avoid returning this from methods just to enable a fluent interface.
    avoid_returning_this: false

    # Avoid setters without getters.
    avoid_setters_without_getters: false

    # Avoid shadowing type parameters.
    avoid_shadowing_type_parameters: false

    # Avoid single cascade in expression statements.
    avoid_single_cascade_in_expression_statements: false

    # Avoid annotating types for function expression parameters.
    avoid_types_on_closure_parameters: false

    # Avoid unnecessary containers.
    avoid_unnecessary_containers: false

    # Avoid defining unused parameters in constructors.
    avoid_unused_constructor_parameters: false

    # Avoid async functions that return void.
    avoid_void_async: false

    # Await only futures.
    await_only_futures: false

    # Name extensions using UpperCamelCase.
    camel_case_extensions: false

    # Name types using UpperCamelCase.
    camel_case_types: false

    # Cascade consecutive method invocations on the same reference.
    cascade_invocations: false

    # Prefer using lowerCamelCase for constant names.
    constant_identifier_names: false

    # DO use curly braces for all flow control structures.
    curly_braces_in_flow_control_structures: false

    # Adhere to Effective Dart Guide directives sorting conventions.
    directives_ordering: false

    # Do not use environment declared variables.
    do_not_use_environment: false

    # Avoid empty catch blocks.
    empty_catches: false

    # Use ; instead of {} for empty constructor bodies.
    empty_constructor_bodies: false

    # Define case clauses for all constants in enum-like classes.
    exhaustive_cases: false

    # Name source files using lowercase_with_underscores.
    file_names: false

    # Use Flutter TODO format: // TODO(username): message, https://URL-to-issue.
    flutter_style_todos: false

    # Don't import implementation files from another package.
    implementation_imports: false

    # Join return statement with assignment when possible.
    join_return_with_assignment: false

    # Start multiline strings with a newline.
    leading_newlines_in_multiline_strings: false

    # Name libraries using lowercase_with_underscores.
    library_names: false

    # Use lowercase_with_underscores when specifying a library prefix.
    library_prefixes: false

    # AVOID lines longer than 80 characters.
    lines_longer_than_80_chars: false

    # Missing whitespace between adjacent strings.
    missing_whitespace_between_adjacent_strings: false

    # No default cases.
    no_default_cases: false

    # Avoid calling toString() on runtimeType.
    no_runtimeType_toString: true

    # Name non-constant identifiers using lowerCamelCase.
    non_constant_identifier_names: false

    # Do not pass null as an argument where a closure is expected.
    null_closures: false

    # Omit type annotations for local variables.
    omit_local_variable_types: false

    # Avoid defining a one-member abstract class when a simple function will do.
    one_member_abstracts: false

    # Only throw instances of classes extending either Exception or Error.
    only_throw_errors: false

    # Don't override fields.
    overridden_fields: false

    # Provide doc comments for all public APIs.
    package_api_docs: true

    # Prefix library names with the package name and a dot-separated path.
    package_prefixed_library_names: true

    # Don't reassign references to parameters of functions or methods.
    parameter_assignments: false

    # Use adjacent strings to concatenate string literals.
    prefer_adjacent_string_concatenation: false

    # Prefer putting asserts in initializer list.
    prefer_asserts_in_initializer_lists: false

    # Prefer asserts with message.
    prefer_asserts_with_message: false

    # Prefer using a boolean as the assert condition.
    prefer_bool_in_asserts: false

    # Use collection literals when possible.
    prefer_collection_literals: false

    # Prefer using ??= over testing for null.
    prefer_conditional_assignment: false

    # Prefer const with constant constructors.
    prefer_const_constructors: false

    # Prefer declaring const constructors on @immutable classes.
    prefer_const_constructors_in_immutables: false

    # Prefer const over final for declarations.
    prefer_const_declarations: false

    # Prefer const literals as parameters of constructors on @immutable classes.
    prefer_const_literals_to_create_immutables: false

    # Prefer defining constructors instead of static methods to create instances.
    prefer_constructors_over_static_methods: false

    # Use contains for List and String instances.
    prefer_contains: false

    # Prefer double quotes where they won't require escape sequences.
    prefer_double_quotes: false

    # Use = to separate a named parameter from its default value.
    prefer_equal_for_default_values: false

    # Use => for short members whose body is a single return statement.
    prefer_expression_function_bodies: false

    # Private field could be final.
    prefer_final_fields: false

    # Prefer final in for-each loop variable if reference is not reassigned.
    prefer_final_in_for_each: false

    # Prefer final for variable declarations if they are not reassigned.
    prefer_final_locals: false

    # Prefer for elements when building maps from iterables.
    prefer_for_elements_to_map_fromIterable: false

    # Use forEach to only apply a function to all the elements.
    prefer_foreach: false

    # Use a function declaration to bind a function to a name.
    prefer_function_declarations_over_variables: false

    # Prefer generic function type aliases.
    prefer_generic_function_type_aliases: false

    # Prefer if elements to conditional expressions where possible.
    prefer_if_elements_to_conditional_expressions: false

    # Prefer using if null operators.
    prefer_if_null_operators: false

    # Use initializing formals when possible.
    prefer_initializing_formals: false

    # Inline list item declarations where possible.
    prefer_inlined_adds: false

    # Prefer int literals over double literals.
    prefer_int_literals: false

    # Use interpolation to compose strings and values.
    prefer_interpolation_to_compose_strings: false

    # Use isEmpty for Iterables and Maps.
    prefer_is_empty: false

    # Use isNotEmpty for Iterables and Maps.
    prefer_is_not_empty: false

    # Prefer is! operator.
    prefer_is_not_operator: false

    # Prefer to use whereType on iterable.
    prefer_iterable_whereType: false

    # Prefer using mixins.
    prefer_mixin: false

    # Prefer using null aware operators.
    prefer_null_aware_operators: false

    # Only use double quotes for strings containing single quotes.
    prefer_single_quotes: false

    # Use spread collections when possible.
    prefer_spread_collections: false

    # Prefer typing uninitialized variables and fields.
    prefer_typing_uninitialized_variables: false

    # Provide a deprecation message, via @Deprecated("message").
    provide_deprecation_message: true

    # Document all public members.
    public_member_api_docs: false

    # Property getter recursively returns itself.
    recursive_getters: false

    # SizedBox for whitespace.
    sized_box_for_whitespace: false

    # Prefer using /// for doc comments.
    slash_for_doc_comments: true

    # Sort child properties last in widget instance creations.
    sort_child_properties_last: true

    # Sort constructor declarations before other members.
    sort_constructors_first: false

    # Sort unnamed constructor declarations first.
    sort_unnamed_constructors_first: true

    # Place the super call last in a constructor initialization list.
    super_goes_last: false

    # Type annotate public APIs.
    type_annotate_public_apis: false

    # Don't type annotate initializing formals.
    type_init_formals: false

    # Future results in async function bodies must be awaited or marked unawaited using package:pedantic.
    unawaited_futures: false

    # Unnecessary await keyword in return.
    unnecessary_await_in_return: false

    # Avoid using braces in interpolation when not needed.
    unnecessary_brace_in_string_interps: false

    # Avoid const keyword.
    unnecessary_const: false

    # Don't use final for local variables.
    unnecessary_final: false

    # Avoid wrapping fields in getters and setters just to be "safe".
    unnecessary_getters_setters: false

    # Don't create a lambda when a tear-off will do.
    unnecessary_lambdas: false

    # Unnecessary new keyword.
    unnecessary_new: true

    # Avoid null in null-aware assignment.
    unnecessary_null_aware_assignments: false

    # Avoid using null in if null operators.
    unnecessary_null_in_if_null_operators: false

    # Don't override a method to do a super method invocation with the same parameters.
    unnecessary_overrides: false

    # Unnecessary parenthesis can be removed.
    unnecessary_parenthesis: false

    # Unnecessary raw string.
    unnecessary_raw_strings: false

    # Remove unnecessary backslashes in strings.
    unnecessary_string_escapes: false

    # Unnecessary string interpolation.
    unnecessary_string_interpolations: false

    # Don't access members with this unless avoiding shadowing.
    unnecessary_this: false

    # Prefer an 8-digit hexadecimal integer(0xFFFFFFFF) to instantiate Color.
    use_full_hex_values_for_flutter_colors: false

    # Use generic function type syntax for parameters.
    use_function_type_syntax_for_parameters: false

    # Prefer intValue.isOdd/isEven instead of checking the result of % 2.
    use_is_even_rather_than_modulo: true

    # Use raw string to avoid escapes.
    use_raw_strings: false

    # Use rethrow to rethrow a caught exception.
    use_rethrow_when_possible: false

    # Use a setter for operations that conceptually change a property.
    use_setters_to_change_properties: false

    # Use string buffers to compose strings.
    use_string_buffers: true

    # Start the name of the method with to/_to or as/_as if applicable.
    use_to_and_as_if_applicable: false

    # Don't assign to void.
    void_checks: false

    ### ---------- Pub Rules ---------- ###
    # Use lowercase_with_underscores for package names.
    package_names: true

    # Sort pub dependencies.
    sort_pub_dependencies: false